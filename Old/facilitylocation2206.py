# -*- coding: utf-8 -*-
"""FacilityLocation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Iml-uQz1rMxM0_SsvAJPq76rcnJ7KzEC

## **Importing Libraries**
"""

import pandas as pd
#import os
import matplotlib.pyplot as plt

"""##**Reading csv File**"""

#from google.colab import drive
#drive.mount('/content/sample_data')
#os.chdir('/content/drive/MyDrive/FacilityLocation/Data')

dtypes = {'START_PIN': str, 'DEST_PIN':str, 'START_STATECODE': str,'DEST_STATECODE': str,'MTH':str,'DISTANCE':int,'MODE':str,'HSN':str,'QTY':float,'UQC':str,'AMOUNT':float,'TAX':float,'EWBS_CNT':int,'SUPP_CNT':int, 'DISTANCERANGE':str}

df = pd.read_csv(r'E:\FacilityLocation\DATA\eway_final.csv',dtype=dtypes, encoding='latin-1')
#df = pd.read_csv('EwayData_Part_1L.csv',skiprows=[46368])
#df = pd.read_csv('eway_final.csv', dtype=dtypes, encoding='latin-1',low_memory=False)
#df = pd.read_csv('EwayData_part_1L.csv',dtype=dtypes,low_memory=False )

"""##**Data Exploration**"""

# Shape of Data
df.shape

# Data Structure
df.info()

#  Data
df.head(5)

# Check for missing values
print("\nMissing values:")
print(df.isnull().sum())

print("\nUnique values in categorical columns:")
for column in df.select_dtypes(include=['object']).columns:
    print(f"{column}: {df[column].nunique()} unique values")

#Summary statistics
df.describe()

"""##**Distribution of Columns**



"""


# 1. Distribution of numerical columns

# 1.1 Histograms for numerical columns
numerical_columns=['DISTANCE','QTY','AMOUNT','TAX','EWBS_CNT','SUPP_CNT']
for column in numerical_columns:
    plt.figure(figsize=(8, 6))
    df[column].hist(color='skyblue')
    plt.title(column)
    plt.xlabel('Value')
    plt.ylabel('Frequency')
    plt.grid(False)
    plt.show()

# 1.2 Distribution of categorical columns
categorical_columns=['MTH','MODE', 'START_STATE','DEST_STATE']
for column in categorical_columns:
    grouped = df.groupby(column)['AMOUNT'].count().reset_index()
    grouped.sort_values('AMOUNT',ascending=False,inplace=True)
    plt.bar(grouped[column], grouped['AMOUNT'])
    plt.title(column)
    plt.xlabel('Category')
    plt.ylabel('Frequency')
    plt.xticks(rotation=90)
    plt.grid(False)
    plt.show()

"""### **Statistics on Values against Categorical Columns**"""

# 2. Statistics on values against categorical columns
categorical_columns={'MTH','MODE'}
for column in categorical_columns:
    grouped = df.groupby(column)['AMOUNT'].sum().reset_index()
    grouped.sort_values('AMOUNT',ascending=False,inplace=True)
    grouped['AMOUNT_CR']=grouped['AMOUNT']/1e8
    plt.bar(grouped[column], grouped['AMOUNT_CR'])
    plt.title(column)
    plt.xlabel('Category')
    plt.ylabel('Amount (in Cr. of Rs.)')
    plt.xticks(rotation=90)
    plt.grid(False)
    plt.show()

# Statistics on values against States
categorical_columns={'START_STATE','DEST_STATE'}
for column in categorical_columns:
    grouped = df.groupby(column)['AMOUNT'].sum().reset_index()
    grouped.sort_values('AMOUNT',inplace=True)
    grouped[column]=grouped[column].replace(['THE DADRA AND NAGAR HAVELI AND DAMAN AND DIU','ANDAMAN AND NICOBAR ISLANDS'],['DADRA,N H& DIU','A&N ISLANDS'])
    grouped['AMOUNT_CR']=grouped['AMOUNT']/1e8
    plt.barh(grouped[column], grouped['AMOUNT_CR'])
    plt.title(column)
    plt.ylabel('State')
    plt.xlabel('Amount (in Cr. of Rs.)')
    #plt.xticks(rotation=90)
    plt.grid(False)
    plt.show()



# Statistics on values against categorical columns
categorical_columns={'MODE'}
df1=df.groupby(['MODE']).sum('AMOUNT')
df1.plot(kind='pie',y='AMOUNT', autopct='%1.0f%%')
plt.show()

#Distancs Slab wise Value of Movement
grouped = df.groupby('DISTANCERANGE')['AMOUNT'].sum().reset_index()
#grouped.sort_values('AMOUNT',inplace=True)
grouped['AMOUNT_CR']=grouped['AMOUNT']/1e8
plt.bar(grouped['DISTANCERANGE'], grouped['AMOUNT_CR'])
plt.title('Distance Slab wise Value of Movement')
plt.xlabel('Distance Slab')
plt.ylabel('Amount (in Cr. of Rs.)')
plt.xticks(rotation=90)
plt.grid(False)
plt.show()

#Top 50 HSN with highest value of Loading
n = 50
grouped_hsn = df.groupby('HSN')['AMOUNT'].sum().reset_index()
grouped_hsn['AMOUNT_CR']=grouped_hsn['AMOUNT']/1e8
# Get the top n records
top_hsn = grouped_hsn.nlargest(n, 'AMOUNT_CR')
top_hsn.sort_values('AMOUNT_CR',inplace=True)
#print(f"\nTop {n} Loading")
#print(top_hsn['amount_cr']
plt.figure(figsize=(8, 12))  # Width: 8 inches, Height: 10 inches
plt.barh(top_hsn['HSN'], top_hsn['AMOUNT_CR'])
plt.title('Top 50 HSN')
plt.xlabel('Amount (Cr. of Rs.)')
plt.ylabel('HSN')
plt.grid(False)
plt.show()

# Statistics on values against State Pairs
n=25

#grouped_od_pair = df.groupby(['START_DISTRICT','DEST_DISTRICT'])['AMOUNT'].sum().reset_index()
grouped_state_pair = df.groupby(['START_STATE','DEST_STATE'])['AMOUNT'].sum().reset_index()
grouped_state_pair['STATEPAIR']=grouped_state_pair['START_STATE']+'-'+ grouped_state_pair['DEST_STATE']
grouped_state_pair['AMOUNT_CR']=grouped_state_pair['AMOUNT']/1e8
#grouped_state_pair[column]=grouped[column].replace(['THE DADRA AND NAGAR HAVELI AND DAMAN AND DIU','ANDAMAN AND NICOBAR ISLANDS'],['DADRA,N H& DIU','A&N ISLANDS'])

# Get the top n records
top_state_pair = grouped_state_pair.nlargest(n, 'AMOUNT_CR')
top_state_pair.sort_values('AMOUNT_CR',inplace=True)

plt.barh(top_state_pair['STATEPAIR'], top_state_pair['AMOUNT_CR'])
plt.title('OD State Pair wise Value of Movement')
plt.xlabel('OD State Pair')
plt.xlabel('Amount (in Cr. of Rs.)')
plt.grid(False)
plt.show()

#Top 20 Originating PIN with highest value of Loading
n = 20
grouped_start_pin = df.groupby('START_PIN')['AMOUNT'].sum().reset_index()
grouped_start_pin['AMOUNT_CR']=grouped_start_pin['AMOUNT']/1e8
# Get the top n records
top_start_pin = grouped_start_pin.nlargest(n, 'AMOUNT_CR')
top_start_pin.sort_values('AMOUNT_CR',inplace=True)

#print(f"\nTop {n} Loading")
#print(top_start_district['amount_cr'])
plt.barh(top_start_pin['START_PIN'], top_start_pin['AMOUNT_CR'])
plt.title('Top 20 Originating PIN')
plt.xlabel('Amount (Cr. of Rs.)')
plt.ylabel('PIN')
plt.grid(False)
plt.show()

#Top 20 Districts with highest value of Loading
n = 20
grouped_start_district = df.groupby('START_DISTRICT')['AMOUNT'].sum().reset_index()
grouped_start_district['AMOUNT_CR']=grouped_start_district['AMOUNT']/1e8
# Get the top n records
top_start_district = grouped_start_district.nlargest(n, 'AMOUNT_CR')
top_start_district.sort_values('AMOUNT_CR',inplace=True)

#print(f"\nTop {n} Loading")
#print(top_start_district['amount_cr'])
plt.barh(top_start_district['START_DISTRICT'], top_start_district['AMOUNT_CR'])
plt.title('Top 20 Originating District')
plt.xlabel('Amount (Cr. of Rs.)')
plt.ylabel('District')
plt.grid(False)
plt.show()

#Top 20 Destination Pin with highest value of Loading
n = 20
grouped_dest_pin = df.groupby('DEST_PIN')['AMOUNT'].sum().reset_index()
grouped_dest_pin['AMOUNT_CR']=grouped_dest_pin['AMOUNT']/1e8
# Get the top n records
top_dest_pin = grouped_dest_pin.nlargest(n, 'AMOUNT_CR')
top_dest_pin.sort_values('AMOUNT_CR',inplace=True)

plt.barh(top_dest_pin['DEST_PIN'], top_dest_pin['AMOUNT_CR'])
plt.title('Top 20 Destination PIN')
plt.xlabel('Amount (Cr. of Rs.)')
plt.ylabel('PIN')
plt.grid(False)
plt.show()

#Top 20 Districts with highest value of UnLoading
n = 20
grouped_dest_district = df.groupby('DEST_DISTRICT')['AMOUNT'].sum().reset_index()
grouped_dest_district['AMOUNT_CR']=grouped_dest_district['AMOUNT']/1e8
# Get the top n records
top_dest_district = grouped_dest_district.nlargest(n, 'AMOUNT_CR')
top_dest_district.sort_values('AMOUNT_CR',inplace=True)

#print(f"\nTop {n} Loading")
#print(top_start_district['amount_cr'])
plt.barh(top_dest_district['DEST_DISTRICT'], top_dest_district['AMOUNT_CR'])
plt.title('Top 20 Destination District')
plt.xlabel('Amount (Cr. of Rs.)')
plt.ylabel('District')
plt.grid(False)
plt.show()

#Top 20 OD-Pair with highest value of Loading
n = 5


grouped_od_pair = df.groupby(['START_DISTRICT','DEST_DISTRICT'])['AMOUNT'].sum().reset_index()
grouped_od_pair['AMOUNT_CR']=grouped_od_pair['AMOUNT']/1e8
# Get the top n records
top_od_pair = grouped_od_pair.nlargest(n, 'AMOUNT_CR')
top_od_pair.sort_values('AMOUNT_CR',inplace=True)

top_od_pair['ODPAIR']=top_od_pair['START_DISTRICT']+'-'+ top_od_pair['DEST_DISTRICT']
#print(f"\nTop {n} OD Pair")
#print(top_od_pair)
plt.barh(top_od_pair['ODPAIR'], top_od_pair['AMOUNT_CR'])
plt.title('Top 20 Origin-Destination District Pair by Total Amount')
plt.xlabel('Amount (Cr. of Rs.)')
plt.ylabel('District')
plt.grid(False)
plt.show()

maxhsn=3
for ind in top_od_pair.index:
    print(top_od_pair['START_DISTRICT'][ind], top_od_pair['DEST_DISTRICT'][ind])
    df_filtered=df[(df['START_DISTRICT']==top_od_pair['START_DISTRICT'][ind]) & (df['DEST_DISTRICT']==top_od_pair['DEST_DISTRICT'][ind])]

    grouped_hsn = df_filtered.groupby(['HSN'])['AMOUNT'].sum().reset_index()
    grouped_hsn['AMOUNT_CR']=grouped_hsn['AMOUNT']/1e8
    #print(grouped_hsn)

    # Get the top n records
    n = min(maxhsn,len(grouped_hsn)) # Ensure n is not greater than the number of unique HSN
    top_hsn = grouped_hsn.nlargest(n, 'AMOUNT_CR')
    top_hsn.sort_values('AMOUNT_CR',inplace=True)
    #print(top_hsn)
    #print(f"\nTop {n} Loading")
    #print(top_hsn['amount_cr']
    plt.figure(figsize=(8, 12))  # Width: 8 inches, Height: 10 inches
    plt.barh(top_hsn['HSN'], top_hsn['AMOUNT_CR'])
    plt.title('Top 3 HSN loaded for OD-Pair   ' + top_od_pair['ODPAIR'][ind] )
    plt.xlabel('Amount (Cr. of Rs.)')
    # Wrap the y-axis labels
    #plt.yticks([textwrap.fill(label, width=20) for label in top_hsn['HSNDTL']])
    plt.ylabel('HSN')
    plt.grid(False)
    plt.show()